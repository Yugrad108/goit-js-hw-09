{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["const STORAGE_FORM_KEY = 'feedback-form-state';  \n\n// Объект для хранения данных формы  \nconst formData = { email: '', message: '' };  \n\n// Ссылки на элементы формы  \nconst refs = {  \n  form: document.querySelector('.feedback-form'),  \n};  \n\n// === Инициализация формы при загрузке страницы ===  \nfunction initPage() {  \n  const savedData = loadFromLS(STORAGE_FORM_KEY);  \n\n  if (savedData) {  \n    refs.form.elements.email.value = savedData.email || '';  \n    refs.form.elements.message.value = savedData.message || '';  \n  }  \n}  \n\ninitPage(); // Запускаем инициализацию  \n\n// === Обработка ввода данных в форму ===  \nrefs.form.addEventListener('input', e => {  \n  // Получаем значения из полей формы  \n  const email = e.currentTarget.elements.email.value.trim();  \n  const message = e.currentTarget.elements.message.value.trim();  \n\n  // Обновляем объект formData  \n  formData.email = email;  \n  formData.message = message;  \n\n  // Сохраняем данные в локальное хранилище  \n  saveToLS(STORAGE_FORM_KEY, formData);  \n});  \n\n// === Обработка отправки формы ===  \nrefs.form.addEventListener('submit', e => {  \n  e.preventDefault();  \n\n  // Получаем значения из полей формы  \n  const email = e.currentTarget.elements.email.value.trim();  \n  const message = e.currentTarget.elements.message.value.trim();  \n\n  // Проверяем, заполнены ли все поля  \n  if (!email || !message) {  \n    alert('Please fill in all fields');  \n    return;  \n  }  \n\n  // Обновляем объект formData  \n  formData.email = email;  \n  formData.message = message;  \n\n  // Выводим данные в консоль  \n  console.log('Submitted data:', formData);  \n\n  // Очищаем локальное хранилище и сбрасываем форму  \n  localStorage.removeItem(STORAGE_FORM_KEY);  \n  refs.form.reset();  \n});  \n\n// === Функции для работы с локальным хранилищем ===  \nfunction saveToLS(key, value) {  \n  localStorage.setItem(key, JSON.stringify(value));  \n}  \n\nfunction loadFromLS(key) {  \n  try {  \n    return JSON.parse(localStorage.getItem(key)) || null;  \n  } catch (error) {  \n    console.error('Error parsing data from localStorage:', error);  \n    return null;  \n  }  \n}\n\n//********TODO 1-var********/\n\n// const STORAGE_FORM_KEY = 'feedback-form-state';  \n\n// const form = document.querySelector('.feedback-form');  \n\n// // Инициализация формы при загрузке  \n// (function initForm() {  \n//   const savedData = loadFromLS(STORAGE_FORM_KEY);  \n//   if (savedData) {  \n//     form.elements.email.value = savedData.email || '';  \n//     form.elements.message.value = savedData.message || '';  \n//   }  \n// })();  \n\n// // Обработка ввода данных  \n// form.addEventListener('input', () => {  \n//   const formData = {  \n//     email: form.elements.email.value.trim(),  \n//     message: form.elements.message.value.trim(),  \n//   };  \n//   saveToLS(STORAGE_FORM_KEY, formData);  \n// });  \n\n// // Обработка отправки формы  \n// form.addEventListener('submit', e => {  \n//   e.preventDefault();  \n\n//   const email = form.elements.email.value.trim();  \n//   const message = form.elements.message.value.trim();  \n\n//   if (!email || !message) {  \n//     alert('Fill please all fields');  \n//     return;  \n//   }  \n\n//   console.log({ email, message });  \n//   localStorage.removeItem(STORAGE_FORM_KEY);  \n//   form.reset();  \n// });  \n\n// // Функции для работы с локальным хранилищем  \n// function saveToLS(key, value) {  \n//   localStorage.setItem(key, JSON.stringify(value));  \n// }  \n\n// function loadFromLS(key) {  \n//   try {  \n//     return JSON.parse(localStorage.getItem(key)) || null;  \n//   } catch {  \n//     return null;  \n//   }  \n// }\n\n//*****TODO 2-var******* */\n\n// const STORAGE_FORM_KEY = 'feedback-form-state';\n\n// const form = document.querySelector('.feedback-form');\n\n// // Инициализация формы при загрузке\n// (function initForm() {\n//   const savedData = loadFromLS(STORAGE_FORM_KEY);\n//   if (savedData) {\n//     form.elements.email.value = savedData.email || '';\n//     form.elements.message.value = savedData.message || '';\n//   }\n// })();\n\n// // Обработка ввода данных\n// form.addEventListener('input', () => {\n//   const formData = new FormData(form);\n//   const data = Object.fromEntries(formData.entries());\n//   saveToLS(STORAGE_FORM_KEY, data);\n// });\n\n// // Обработка отправки формы\n// form.addEventListener('submit', e => {\n//   e.preventDefault();\n\n//   const formData = new FormData(form);\n//   const data = Object.fromEntries(formData.entries());\n\n//   if (!data.email || !data.message) {\n//     alert('Fill please all fields');\n//     return;\n//   }\n\n//   console.log(data);\n//   localStorage.removeItem(STORAGE_FORM_KEY);\n//   form.reset();\n// });\n\n// // Функции для работы с локальным хранилищем\n// function saveToLS(key, value) {\n//   localStorage.setItem(key, JSON.stringify(value));\n// }\n\n// function loadFromLS(key) {\n//   try {\n//     return JSON.parse(localStorage.getItem(key)) || null;\n//   } catch {\n//     return null;\n//   }\n// }\n\n//*****TODO 3-var******* */\n\n\n// const STORAGE_FORM_KEY = 'feedback-form-state';\n// const formData = { email: '', message: '' };\n\n// const refs = {\n//   form: document.querySelector('.feedback-form'),\n// };\n\n// // Когда пользователь вводит данные в форму,\n// // мы получаем эти данные и сохраняем в локальное хранилище\n// refs.form.addEventListener('input', e => {\n//   const email = e.currentTarget.elements.email.value.trim();\n//   const message = e.currentTarget.elements.message.value.trim();\n//   formData.email = email;\n//   formData.message = message;\n//   saveToLS(STORAGE_FORM_KEY, formData);\n// });\n\n// // Когда страница загружается,\n// // мы получаем данные из локального хранилища и\n// // заполняем ими форму\n// function initPage() {\n//   const localData = loadFromLS(STORAGE_FORM_KEY);\n//   if (localData) {\n//     refs.form.elements.email.value = localData.email || '';\n//     refs.form.elements.message.value = localData.message || '';\n//   }\n// }\n\n// initPage();\n\n// // Когда пользователь отправляет форму,\n// // мы получаем данные из формы,\n// // сохраняем их в локальное хранилище,\n// // выводим сообщение в консоли,\n// // очищаем форму\n// refs.form.addEventListener('submit', e => {\n//   e.preventDefault();\n\n\n//   const email = e.currentTarget.elements.email.value.trim();\n//   const message = e.currentTarget.elements.message.value.trim();\n\n//   if (!formData.email || !formData.message) {\n//     alert('Fill please all fields');\n//     return;\n//   }\n\n\n//   formData.email = email;\n//   formData.message = message;\n//   console.log(formData);\n//   localStorage.removeItem(STORAGE_FORM_KEY);\n//   e.target.reset();\n// });\n\n// // Функция для сохранения данных в локальное хранилище\n// function saveToLS(key, value) {\n//   const jsonData = JSON.stringify(value);\n//   localStorage.setItem(key, jsonData);\n// }\n\n// // Функция для получения данных из локального хранилища\n// function loadFromLS(key) {\n//   const body = localStorage.getItem(key);\n//   try {\n//     const data = JSON.parse(body);\n//     return data;\n//   } catch {\n//     return body;\n//   }\n// }\n\n\n"],"names":["STORAGE_FORM_KEY","formData","refs","initPage","savedData","loadFromLS","email","message","saveToLS","key","value","error"],"mappings":"oDAAA,MAAMA,EAAmB,sBAGnBC,EAAW,CAAE,MAAO,GAAI,QAAS,EAAE,EAGnCC,EAAO,CACX,KAAM,SAAS,cAAc,gBAAgB,CAC/C,EAGA,SAASC,GAAW,CAClB,MAAMC,EAAYC,EAAWL,CAAgB,EAEzCI,IACFF,EAAK,KAAK,SAAS,MAAM,MAAQE,EAAU,OAAS,GACpDF,EAAK,KAAK,SAAS,QAAQ,MAAQE,EAAU,SAAW,GAE5D,CAEAD,IAGAD,EAAK,KAAK,iBAAiB,QAAS,GAAK,CAEvC,MAAMI,EAAQ,EAAE,cAAc,SAAS,MAAM,MAAM,OAC7CC,EAAU,EAAE,cAAc,SAAS,QAAQ,MAAM,OAGvDN,EAAS,MAAQK,EACjBL,EAAS,QAAUM,EAGnBC,EAASR,EAAkBC,CAAQ,CACrC,CAAC,EAGDC,EAAK,KAAK,iBAAiB,SAAU,GAAK,CACxC,EAAE,eAAc,EAGhB,MAAMI,EAAQ,EAAE,cAAc,SAAS,MAAM,MAAM,OAC7CC,EAAU,EAAE,cAAc,SAAS,QAAQ,MAAM,OAGvD,GAAI,CAACD,GAAS,CAACC,EAAS,CACtB,MAAM,2BAA2B,EACjC,MACD,CAGDN,EAAS,MAAQK,EACjBL,EAAS,QAAUM,EAGnB,QAAQ,IAAI,kBAAmBN,CAAQ,EAGvC,aAAa,WAAWD,CAAgB,EACxCE,EAAK,KAAK,OACZ,CAAC,EAGD,SAASM,EAASC,EAAKC,EAAO,CAC5B,aAAa,QAAQD,EAAK,KAAK,UAAUC,CAAK,CAAC,CACjD,CAEA,SAASL,EAAWI,EAAK,CACvB,GAAI,CACF,OAAO,KAAK,MAAM,aAAa,QAAQA,CAAG,CAAC,GAAK,IACjD,OAAQE,EAAO,CACd,eAAQ,MAAM,wCAAyCA,CAAK,EACrD,IACR,CACH"}